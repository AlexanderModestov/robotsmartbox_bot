import logging
import os
import json
from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
from bot.messages import Messages
from bot.config import Config
from bot.services.automation_handler import AutomationHandler

# States for FSM
class UserState(StatesGroup):
    help = State()
    waiting_for_question = State()
    automation_query = State()
    automation_category = State()

# Create routers for commands
start_router = Router()
content_router = Router()

@start_router.message(CommandStart())
async def cmd_start(message: types.Message, supabase_client):
    """Start command handler"""
    user_name = message.from_user.first_name
    await message.answer(Messages.START_CMD["welcome"](user_name))
    
    try:
        # Register user in Supabase
        await supabase_client.create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
    except Exception as e:
        logging.warning(f"User registration error: {e}")

@start_router.message(Command("about"))
async def about(message: types.Message):
    """About command handler"""
    await message.answer(
        Messages.ABOUT_MESSAGE,
        parse_mode="Markdown"
    )

@content_router.message(Command('automatizations'))
async def list_automatizations(message: types.Message, supabase_client):
    """Show automatization examples with categories from Supabase"""
    try:
        # Fetch unique categories from documents table
        response = supabase_client.client.table('documents').select('category').not_('category', 'is', 'null').execute()
        
        categories = []
        if response.data:
            # Get unique categories
            unique_categories = set()
            for doc in response.data:
                if doc['category'] and doc['category'].strip():
                    unique_categories.add(doc['category'].strip())
            categories = sorted(list(unique_categories))
        
        # Create keyboard with categories
        keyboard_buttons = []
        
        # Add "All automatizations" button first
        keyboard_buttons.append([
            InlineKeyboardButton(text="ü§ñ –í—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏", callback_data="automations_all")
        ])
        
        # Add category buttons
        for category in categories[:8]:  # Limit to 8 categories to avoid keyboard size issues
            keyboard_buttons.append([
                InlineKeyboardButton(text=f"‚öôÔ∏è {category}", callback_data=f"automation_cat_{category}")
            ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        # Log the command access
        print(f"ü§ñ Automatizations command: User {message.from_user.id} ({message.from_user.username}) accessing automatization examples")
        logging.info(f"Automatizations command: User {message.from_user.id} accessing automatization examples")
        
        await message.answer(
            "ü§ñ *–ü—Ä–∏–º–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏*\n\n"
            "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logging.error(f"Error in list_automatizations: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π.")

@content_router.message(Command('booking'))
async def schedule_command(message: types.Message):
    """Handle booking command with Calendly webapp"""
    try:
        # Create Calendly webapp button
        calendly_button = InlineKeyboardButton(
            text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é",
            web_app=WebAppInfo(url=Config.CALENDLY_LINK)
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[calendly_button]])
        
        # Log the booking access
        print(f"üìÖ Booking command: User {message.from_user.id} ({message.from_user.username}) accessing booking webapp")
        logging.info(f"Booking command: User {message.from_user.id} accessing booking webapp")
        
        await message.answer(
            "üìÖ *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Calendly.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logging.error(f"Error in schedule_command: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")

@content_router.message(Command('pay'))
async def pay_command(message: types.Message):
    """Handle payment command with Stripe webapp"""
    try:
        # Create Stripe payment webapp button
        stripe_button = InlineKeyboardButton(
            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —É—Å–ª—É–≥—É",
            web_app=WebAppInfo(url=Config.STRIPE_PAYMENT_LINK)
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[stripe_button]])
        
        # Log the payment access
        print(f"üí≥ Pay command: User {message.from_user.id} ({message.from_user.username}) accessing payment webapp")
        logging.info(f"Pay command: User {message.from_user.id} accessing payment webapp")
        
        await message.answer(
            "üí≥ *–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏*\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Stripe:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logging.error(f"Error in pay_command: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–ø–ª–∞—Ç—ã.")

@content_router.message(Command('subscribe'))
async def subscribe_command(message: types.Message):
    """Handle subscription command"""
    await message.answer(
        "‚öôÔ∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!\n\n"
        "–í –±—É–¥—É—â–µ–º –æ—Ñ–æ—Ä–º–∏–≤ –ø–æ–¥–ø–∏—Å–∫—É, –í—ã –ø–æ–ª—É—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.", 
        parse_mode="HTML"
    )

@content_router.message(Command('settings'))
async def settings_command(message: types.Message, supabase_client):
    """Settings command handler"""
    try:
        # Get current user settings from database
        user = await supabase_client.get_user_by_telegram_id(message.from_user.id)
        
        if user:
            audio_status = "üîä –ê—É–¥–∏–æ" if user.isAudio else "üìù –¢–µ–∫—Å—Ç"
            notif_status = "üîî –í–∫–ª—é—á–µ–Ω—ã" if user.notification else "üîï –û—Ç–∫–ª—é—á–µ–Ω—ã"
            
            # Dynamic buttons based on current settings
            if user.isAudio:
                format_button_text = "üìù –í—ã–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã"
                format_callback = "format_text"
            else:
                format_button_text = "üéß –í—ã–±—Ä–∞—Ç—å –∞—É–¥–∏–æ–æ—Ç–≤–µ—Ç—ã"
                format_callback = "format_audio"
            
            if user.notification:
                notif_button_text = "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                notif_callback = "notifications_off"
            else:
                notif_button_text = "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                notif_callback = "notifications_on"
        else:
            audio_status = "üìù –¢–µ–∫—Å—Ç"
            notif_status = "üîï –û—Ç–∫–ª—é—á–µ–Ω—ã"
            format_button_text = "üéß –í—ã–±—Ä–∞—Ç—å –∞—É–¥–∏–æ–æ—Ç–≤–µ—Ç—ã"
            format_callback = "format_audio"
            notif_button_text = "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            notif_callback = "notifications_on"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=format_button_text, callback_data=format_callback)],
            [InlineKeyboardButton(text=notif_button_text, callback_data=notif_callback)]
        ])
        
        settings_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            "<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            f"üí¨ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤: {audio_status}\n"
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notif_status}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await message.answer(
            settings_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"Error in settings command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")



@content_router.callback_query(lambda c: c.data == 'setting_quiz')
async def setting_quiz(callback_query: types.CallbackQuery):
    """Handle quiz setting"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å –∫–≤–∏–∑", callback_data="start_quiz")],
        [InlineKeyboardButton(text="üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="quiz_results")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")]
    ])
    
    await callback_query.message.edit_text(
        "üìù <b>–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–≤–∏–∑–∞ –ø–æ —Ç–µ–º–∞–º —ç—Ñ–∏—Ä–∞</b>\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –ø–æ —Ç–µ–º–∞–º —ç—Ñ–∏—Ä–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@content_router.callback_query(lambda c: c.data == 'back_to_settings')
async def back_to_settings(callback_query: types.CallbackQuery, supabase_client):
    """Go back to main settings menu"""
    try:
        # Get current user settings from database
        user = await supabase_client.get_user_by_telegram_id(callback_query.from_user.id)
        
        if user:
            audio_status = "üîä –ê—É–¥–∏–æ" if user.isAudio else "üìù –¢–µ–∫—Å—Ç"
            notif_status = "üîî –í–∫–ª—é—á–µ–Ω—ã" if user.notification else "üîï –û—Ç–∫–ª—é—á–µ–Ω—ã"
            
            # Dynamic buttons based on current settings
            if user.isAudio:
                format_button_text = "üìù –í—ã–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã"
                format_callback = "format_text"
            else:
                format_button_text = "üéß –í—ã–±—Ä–∞—Ç—å –∞—É–¥–∏–æ–æ—Ç–≤–µ—Ç—ã"
                format_callback = "format_audio"
            
            if user.notification:
                notif_button_text = "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                notif_callback = "notifications_off"
            else:
                notif_button_text = "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                notif_callback = "notifications_on"
        else:
            audio_status = "üìù –¢–µ–∫—Å—Ç"
            notif_status = "üîï –û—Ç–∫–ª—é—á–µ–Ω—ã"
            format_button_text = "üéß –í—ã–±—Ä–∞—Ç—å –∞—É–¥–∏–æ–æ—Ç–≤–µ—Ç—ã"
            format_callback = "format_audio"
            notif_button_text = "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            notif_callback = "notifications_on"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=format_button_text, callback_data=format_callback)],
            [InlineKeyboardButton(text=notif_button_text, callback_data=notif_callback)]
        ])
        
        settings_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            "<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            f"üí¨ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤: {audio_status}\n"
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notif_status}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        try:
            await callback_query.message.edit_text(
                settings_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except Exception as edit_error:
            # Handle case when message content is the same (Telegram error)
            if "message is not modified" in str(edit_error):
                # Message content is identical, just acknowledge the callback
                pass
            else:
                # Re-raise other errors
                raise edit_error
    except Exception as e:
        logging.error(f"Error in back_to_settings: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@content_router.callback_query(lambda c: c.data in ['format_text', 'format_audio'])
async def handle_format_selection(callback_query: types.CallbackQuery, supabase_client):
    """Handle response format selection"""
    is_audio = callback_query.data == 'format_audio'
    format_type = "–∞—É–¥–∏–æ" if is_audio else "—Ç–µ–∫—Å—Ç–æ–≤–æ–º"
    
    try:
        # Save user preference to database
        user_data = {
            'telegram_id': callback_query.from_user.id,
            'isAudio': is_audio
        }
        
        await supabase_client.create_or_update_user(user_data)
        
        # Show brief confirmation and redirect back to settings
        await callback_query.answer(f"‚úÖ –§–æ—Ä–º–∞—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {format_type}")
        
        # Redirect back to settings menu
        await back_to_settings(callback_query, supabase_client)
    except Exception as e:
        logging.error(f"Error saving format preference: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@content_router.callback_query(lambda c: c.data in ['notifications_on', 'notifications_off'])
async def handle_notifications_selection(callback_query: types.CallbackQuery, supabase_client):
    """Handle notifications setting selection"""
    notifications_enabled = callback_query.data == 'notifications_on'
    status = "–≤–∫–ª—é—á–µ–Ω—ã" if notifications_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    
    try:
        # Save notification preference to database
        user_data = {
            'telegram_id': callback_query.from_user.id,
            'notification': notifications_enabled
        }
        
        await supabase_client.create_or_update_user(user_data)
        
        # Show brief confirmation and redirect back to settings
        await callback_query.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")
        
        # Redirect back to settings menu
        await back_to_settings(callback_query, supabase_client)
    except Exception as e:
        logging.error(f"Error saving notification preference: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@content_router.callback_query(lambda c: c.data.startswith('quiz_page_'))
async def handle_quiz_pagination(callback_query: types.CallbackQuery):
    """Handle quiz pagination"""
    try:
        # Extract page number from callback data
        page = int(callback_query.data.replace('quiz_page_', ''))
        
        # Show quiz topics for the requested page
        await show_quiz_topics(callback_query.message, page=page, edit_message=True)
        
        # Answer callback query
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"Error in handle_quiz_pagination: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º")

@content_router.callback_query(lambda c: c.data in ['start_quiz', 'quiz_results'])
async def handle_quiz_actions(callback_query: types.CallbackQuery):
    """Handle quiz actions"""
    if callback_query.data == 'start_quiz':
        await callback_query.message.edit_text(
            "üéØ <b>–ö–≤–∏–∑ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
            "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–≤–∏–∑–∞ –ø–æ —Ç–µ–º–∞–º —ç—Ñ–∏—Ä–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!\n"
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏.",
            parse_mode="HTML"
        )
    else:  # quiz_results
        await callback_query.message.edit_text(
            "üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∏–∑–∞</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–≤–∏–∑–æ–≤.\n"
            "–ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!",
            parse_mode="HTML"
        )

@content_router.callback_query(lambda c: c.data == 'materials_web_app')
async def handle_materials_web_app(callback_query: types.CallbackQuery):
    """Handle web app materials selection"""
    try:
        webapp_url = f"{Config.WEBAPP_URL}"
        webapp_button = InlineKeyboardButton(
            text="üåê –û—Ç–∫—Ä—ã—Ç—å Web App",
            web_app=WebAppInfo(url=webapp_url)
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[webapp_button]])
        
        await callback_query.message.edit_text(
            "üåê <b>Web App</b>\n\n"
            "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"Error in materials_web_app: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

@content_router.callback_query(lambda c: c.data == 'materials_videos')
async def handle_materials_videos(callback_query: types.CallbackQuery):
    """Handle videos materials selection"""
    try:
        webapp_url = f"{Config.WEBAPP_URL}/videos"
        webapp_button = InlineKeyboardButton(
            text="üé• –û—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ",
            web_app=WebAppInfo(url=webapp_url)
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[webapp_button]])
        
        await callback_query.message.edit_text(
            "üé• <b>Videos</b>\n\n"
            "–í–∏–¥–µ–æ—É—Ä–æ–∫–∏, –∑–∞–ø–∏—Å–∏ –ª–µ–∫—Ü–∏–π –∏ –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"Error in materials_videos: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ")

@content_router.callback_query(lambda c: c.data == 'materials_texts')
async def handle_materials_texts(callback_query: types.CallbackQuery):
    """Handle texts materials selection"""
    try:
        webapp_url = f"{Config.WEBAPP_URL}/texts"
        webapp_button = InlineKeyboardButton(
            text="üìù –û—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—Å—Ç—ã",
            web_app=WebAppInfo(url=webapp_url)
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[webapp_button]])
        
        await callback_query.message.edit_text(
            "üìù <b>Texts</b>\n\n"
            "–°—Ç–∞—Ç—å–∏, –∫–æ–Ω—Å–ø–µ–∫—Ç—ã, —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"Error in materials_texts: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–∫—Å—Ç–æ–≤")

@content_router.callback_query(lambda c: c.data == 'materials_podcasts')
async def handle_materials_podcasts(callback_query: types.CallbackQuery):
    """Handle podcasts materials selection"""
    try:
        webapp_url = f"{Config.WEBAPP_URL}/podcasts"
        webapp_button = InlineKeyboardButton(
            text="üéß –û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–∫–∞—Å—Ç—ã",
            web_app=WebAppInfo(url=webapp_url)
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[webapp_button]])
        
        await callback_query.message.edit_text(
            "üéß <b>Podcasts</b>\n\n"
            "–ê—É–¥–∏–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø–æ–¥–∫–∞—Å—Ç—ã –∏ –∑–∞–ø–∏—Å–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–π.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ø–æ–¥–∫–∞—Å—Ç–æ–≤:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"Error in materials_podcasts: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–∫–∞—Å—Ç–æ–≤")

@content_router.callback_query(lambda c: c.data == 'automations_all')
async def handle_automations_all(callback_query: types.CallbackQuery, supabase_client):
    """Handle all automatizations selection"""
    try:
        # Fetch all automation documents
        response = supabase_client.client.table('documents').select('id, metadata, url, category').not_('category', 'is', 'null').limit(10).execute()
        
        message_text = "ü§ñ <b>–í—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</b>\n\n"
        
        if response.data:
            for doc in response.data:
                metadata = doc.get('metadata', {})
                if isinstance(metadata, dict):
                    file_name = metadata.get('file_name', 'Unnamed')
                    url = doc.get('url') or metadata.get('url', '#')
                    category = doc.get('category', 'Uncategorized')
                    
                    message_text += f"‚öôÔ∏è <b>{file_name}</b>\n"
                    message_text += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                    if url and url != '#':
                        message_text += f"üîó <a href='{url}'>–û—Ç–∫—Ä—ã—Ç—å</a>\n"
                    message_text += "\n"
        else:
            message_text += "–ü—Ä–∏–º–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        back_button = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_automations")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[back_button]])
        
        await callback_query.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logging.error(f"Error in handle_automations_all: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π")

@content_router.callback_query(lambda c: c.data.startswith('automation_cat_'))
async def handle_automation_category(callback_query: types.CallbackQuery, supabase_client):
    """Handle specific automation category selection"""
    try:
        category = callback_query.data.replace('automation_cat_', '')
        
        # Fetch automation documents for this category
        response = supabase_client.client.table('documents').select('id, metadata, url, category').eq('category', category).limit(10).execute()
        
        message_text = f"‚öôÔ∏è <b>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {category}</b>\n\n"
        
        if response.data:
            for doc in response.data:
                metadata = doc.get('metadata', {})
                if isinstance(metadata, dict):
                    file_name = metadata.get('file_name', 'Unnamed')
                    url = doc.get('url') or metadata.get('url', '#')
                    
                    message_text += f"ü§ñ <b>{file_name}</b>\n"
                    if url and url != '#':
                        message_text += f"üîó <a href='{url}'>–û—Ç–∫—Ä—ã—Ç—å</a>\n"
                    message_text += "\n"
        else:
            message_text += f"–ü—Ä–∏–º–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        back_button = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_automations")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[back_button]])
        
        await callback_query.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logging.error(f"Error in handle_automation_category: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π")

@content_router.callback_query(lambda c: c.data == 'back_to_automations')
async def handle_back_to_automations(callback_query: types.CallbackQuery, supabase_client):
    """Handle back to automatizations menu"""
    try:
        # Fetch unique categories from documents table
        response = supabase_client.client.table('documents').select('category').not_('category', 'is', 'null').execute()
        
        categories = []
        if response.data:
            # Get unique categories
            unique_categories = set()
            for doc in response.data:
                if doc['category'] and doc['category'].strip():
                    unique_categories.add(doc['category'].strip())
            categories = sorted(list(unique_categories))
        
        # Create keyboard with categories
        keyboard_buttons = []
        
        # Add "All automatizations" button first
        keyboard_buttons.append([
            InlineKeyboardButton(text="ü§ñ –í—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏", callback_data="automations_all")
        ])
        
        # Add category buttons
        for category in categories[:8]:  # Limit to 8 categories to avoid keyboard size issues
            keyboard_buttons.append([
                InlineKeyboardButton(text=f"‚öôÔ∏è {category}", callback_data=f"automation_cat_{category}")
            ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback_query.message.edit_text(
            "ü§ñ *–ü—Ä–∏–º–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏*\n\n"
            "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logging.error(f"Error in handle_back_to_automations: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è–º")


@content_router.message(Command('help'))
async def command_request(message: types.Message, state: FSMContext) -> None:
    """Help command - initiate question asking"""
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –í–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ –∏ <b>–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b>!", parse_mode="HTML")
    await state.set_state(UserState.help)

# Request help - send to admin
@content_router.message(UserState.help)
async def help(message: types.Message, state: FSMContext):
    """Send message to admin"""
    user_mention = f"[{message.from_user.full_name}](tg://user?id={message.from_user.id})"
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ —Å—É—Ç–æ–∫. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏.")
    await state.clear()
    
    # Send to admin if admin ID is configured
    if Config.TELEGRAM_ADMIN_ID and Config.TELEGRAM_ADMIN_ID != 0:
        try:
            await message.bot.send_message(
                chat_id=Config.TELEGRAM_ADMIN_ID,
                text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:\n\n{message.text}",
                parse_mode="Markdown"
            )
        except Exception as e:
            logging.error(f"Error sending message to admin: {e}")

# ===============================
# AUTOMATION COMMANDS
# ===============================

@content_router.message(Command('automate'))
async def automate_command(message: types.Message, state: FSMContext, supabase_client):
    """Handle /automate command"""
    try:
        automation_handler = AutomationHandler(supabase_client)
        
        # Check if user provided a query with the command
        command_parts = message.text.split(' ', 1)
        if len(command_parts) > 1:
            # User provided query directly
            query = command_parts[1].strip()
            
            await message.answer("üîç –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
            
            # Process the query
            result = await automation_handler.handle_automation_query(
                user_id=message.from_user.id,
                query=query
            )
            
            if result.get('success') and result.get('recommendations'):
                # Format and send results
                response = result.get('contextual_response', '–ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:')
                await message.answer(response, parse_mode="Markdown")
                
                # Send each automation as a separate message
                for i, automation in enumerate(result['recommendations'][:3], 1):  # Limit to top 3
                    automation_text = automation_handler.format_automation_for_telegram(automation)
                    
                    # Create inline keyboard for this automation
                    keyboard_buttons = []
                    
                    # Add URL button if available
                    if automation.get('url'):
                        keyboard_buttons.append([
                            InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ n8n.io", url=automation['url'])
                        ])
                    
                    # Add similar automations button
                    keyboard_buttons.append([
                        InlineKeyboardButton(text="üîç –ü–æ—Ö–æ–∂–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏", callback_data=f"similar_{automation.get('title', '')[:20]}")
                    ])
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
                    
                    await message.answer(
                        automation_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                
                if len(result['recommendations']) > 3:
                    await message.answer(f"–ò –µ—â–µ {len(result['recommendations']) - 3} –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            
            else:
                # No results found
                error_message = result.get('contextual_response', '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.')
                await message.answer(error_message)
                
                # Suggest categories
                categories = automation_handler.get_available_categories()[:5]
                suggestion_text = "\nüìö **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö:**\n"
                for cat in categories:
                    suggestion_text += f"‚Ä¢ {cat['name']}\n"
                suggestion_text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /knowledge –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."
                
                await message.answer(suggestion_text, parse_mode="Markdown")
        
        else:
            # No query provided, ask for it
            await message.answer(
                "ü§ñ **–ü–æ–º–æ—â—å –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏**\n\n"
                "–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å:\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É Google Sheets –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n"
                "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –∏–∑ RSS\n"
                "‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ\n\n"
                "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:",
                parse_mode="Markdown"
            )
            await state.set_state(UserState.automation_query)
    
    except Exception as e:
        logging.error(f"Error in automate command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

@content_router.message(UserState.automation_query)
async def handle_automation_query_state(message: types.Message, state: FSMContext, supabase_client):
    """Handle automation query in FSM state"""
    try:
        automation_handler = AutomationHandler(supabase_client)
        
        await message.answer("üîç –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
        
        # Process the query
        result = await automation_handler.handle_automation_query(
            user_id=message.from_user.id,
            query=message.text
        )
        
        await state.clear()  # Clear the state
        
        if result.get('success') and result.get('recommendations'):
            # Send contextual response
            response = result.get('contextual_response', '–ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:')
            await message.answer(response, parse_mode="Markdown")
            
            # Send top 3 automations
            for automation in result['recommendations'][:3]:
                automation_text = automation_handler.format_automation_for_telegram(automation)
                
                # Create inline keyboard
                keyboard_buttons = []
                if automation.get('url'):
                    keyboard_buttons.append([
                        InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ n8n.io", url=automation['url'])
                    ])
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
                
                await message.answer(
                    automation_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
        
        else:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.")
    
    except Exception as e:
        logging.error(f"Error handling automation query: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        await state.clear()

@content_router.message(Command('knowledge'))
async def knowledge_command(message: types.Message, supabase_client):
    """Handle /knowledge command - show automation knowledge base"""
    try:
        automation_handler = AutomationHandler(supabase_client)
        
        # Get available categories
        categories = automation_handler.get_available_categories()
        
        # Create inline keyboard with categories
        keyboard_buttons = []
        
        # Add trending button first
        keyboard_buttons.append([
            InlineKeyboardButton(text="üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏", callback_data="knowledge_trending")
        ])
        
        # Add beginner button
        keyboard_buttons.append([
            InlineKeyboardButton(text="üöÄ –î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö", callback_data="knowledge_beginner")
        ])
        
        # Add categories (2 per row)
        for i in range(0, len(categories), 2):
            row = []
            for j in range(2):
                if i + j < len(categories):
                    cat = categories[i + j]
                    emoji_map = {
                        'social-media': 'üì±',
                        'ai-ml': 'üß†', 
                        'business-automation': 'üíº',
                        'data-processing': 'üìä',
                        'communication': 'üí¨',
                        'productivity': '‚ö°',
                        'web-scraping': 'üï∑Ô∏è',
                        'marketing': 'üìà',
                        'api-integration': 'üîó',
                        'e-commerce': 'üõí'
                    }
                    emoji = emoji_map.get(cat['key'], '‚öôÔ∏è')
                    row.append(InlineKeyboardButton(
                        text=f"{emoji} {cat['name'][:15]}",
                        callback_data=f"knowledge_cat_{cat['key']}"
                    ))
            if row:
                keyboard_buttons.append(row)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        # Send knowledge base overview
        message_text = """üìö **–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏**

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π! –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ:

üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏** - —Å–∞–º—ã–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
üöÄ **–î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö** - –ø—Ä–æ—Å—Ç—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
üìÇ **–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º** - –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á

**–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ:** –±–æ–ª–µ–µ 150 –≥–æ—Ç–æ–≤—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"""
        
        await message.answer(
            message_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    except Exception as e:
        logging.error(f"Error in knowledge command: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.")

# Knowledge base callback handlers
@content_router.callback_query(lambda c: c.data.startswith('knowledge_'))
async def handle_knowledge_callback(callback_query: types.CallbackQuery, supabase_client):
    """Handle knowledge base callback queries"""
    try:
        automation_handler = AutomationHandler(supabase_client)
        action = callback_query.data.replace('knowledge_', '')
        
        await callback_query.answer()
        
        if action == 'trending':
            await callback_query.message.edit_text("üîç –ó–∞–≥—Ä—É–∂–∞—é –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
            
            result = await automation_handler.get_trending_automations(callback_query.from_user.id)
            
            if result.get('success') and result.get('recommendations'):
                response = "üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏**\n\n"
                response += result.get('contextual_response', '')
                
                await callback_query.message.edit_text(response, parse_mode="Markdown")
                
                # Send each automation
                for automation in result['recommendations'][:4]:  # Top 4
                    automation_text = automation_handler.format_automation_for_telegram(automation, include_details=False)
                    
                    keyboard_buttons = []
                    if automation.get('url'):
                        keyboard_buttons.append([
                            InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å", url=automation['url'])
                        ])
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
                    
                    await callback_query.message.answer(
                        automation_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
        
        elif action == 'beginner':
            await callback_query.message.edit_text("üîç –ó–∞–≥—Ä—É–∂–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö...")
            
            result = await automation_handler.get_beginner_automations(callback_query.from_user.id)
            
            if result.get('success') and result.get('recommendations'):
                response = result.get('contextual_response', 'üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö')
                await callback_query.message.edit_text(response, parse_mode="Markdown")
                
                # Send automations
                for automation in result['recommendations'][:4]:
                    automation_text = automation_handler.format_automation_for_telegram(automation, include_details=False)
                    
                    keyboard_buttons = []
                    if automation.get('url'):
                        keyboard_buttons.append([
                            InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å", url=automation['url'])
                        ])
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
                    
                    await callback_query.message.answer(
                        automation_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
        
        elif action.startswith('cat_'):
            category = action.replace('cat_', '')
            await callback_query.message.edit_text(f"üîç –ó–∞–≥—Ä—É–∂–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}...")
            
            result = await automation_handler.handle_category_browse(callback_query.from_user.id, category)
            
            if result.get('success') and result.get('recommendations'):
                category_info = result.get('category_info', {})
                response = f"üìÇ **{category_info.get('name', category)}**\n\n"
                response += category_info.get('description', '') + "\n\n"
                response += f"–ù–∞–π–¥–µ–Ω–æ {len(result['recommendations'])} –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π:"
                
                await callback_query.message.edit_text(response, parse_mode="Markdown")
                
                # Send automations
                for automation in result['recommendations'][:4]:
                    automation_text = automation_handler.format_automation_for_telegram(automation, include_details=False)
                    
                    keyboard_buttons = []
                    if automation.get('url'):
                        keyboard_buttons.append([
                            InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å", url=automation['url'])
                        ])
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
                    
                    await callback_query.message.answer(
                        automation_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
            else:
                await callback_query.message.edit_text(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π.")
    
    except Exception as e:
        logging.error(f"Error handling knowledge callback: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)